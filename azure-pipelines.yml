# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
#- main
- none

pool:
  #vmImage: ubuntu-latest
  vmImage: windows-latest

steps:
- task: CmdLine@2
  inputs:
    script: 'npm init --yes'
  displayName: NPM init

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(Build.SourcesDirectory)/'
  displayName: installing NPM packages

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Sonarcloud'
    organization: 'i441156'
    scannerMode: 'MSBuild'
    projectKey: 'I441156_DealResourceServer'
    projectName: 'DealResourceServer'
    extraProperties: |
     sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)\**\opencover.xml
     sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)\**\*.trx
  displayName: Preparing SonarCloud

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
  displayName: Building project

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    #projects: 'UnitTestProjectResourceServer/**/*.csproj'
    projects: '**/*.csproj'
    #arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'
    #arguments: '--blame --no-restore --verbosity normal --logger "trx;LogFileName=testResults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=opencover.xml'
    arguments: '--collect "Code Coverage"'
    testRunTitle: 'All tests'
  displayName: Testing project
- task: SonarCloudAnalyze@1
  displayName: Analyzing 

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
  displayName: Publishing results

- task: Docker@2
  inputs:
    containerRegistry: 'Docker registry'
    repository: 'msomers/semester6'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'